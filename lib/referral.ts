import {
  FIREBASE_PROJECT_ID,
  FIREBASE_CLIENT_EMAIL,
  FIREBASE_PRIVATE_KEY,
  BEEHIIV_API_KEY,
  BEEHIIV_PUBLICATION_ID,
} from "@/lib/constants"
import { initializeApp, getApps, cert } from "firebase-admin/app"
import { getFirestore } from "firebase-admin/firestore"

// Initialize Firebase Admin SDK if not already initialized
if (!getApps().length) {
  initializeApp({
    credential: cert({
      projectId: FIREBASE_PROJECT_ID,
      clientEmail: FIREBASE_CLIENT_EMAIL,
      privateKey: FIREBASE_PRIVATE_KEY?.replace(/\\n/g, "\n"), // Handle private key newlines
    }),
  })
}

const db = getFirestore()

export async function generateReferralCode(email: string): Promise<string> {
  // Simple hash of the email for a deterministic code
  const hash = btoa(email).substring(0, 8).toUpperCase()
  const code = `ARTHOUSE-${hash}`

  // Store or update referral code in Firestore
  const referralRef = db.collection("referrals").doc(code)
  await referralRef.set(
    {
      email: email,
      code: code,
      signups: 0, // Initialize signups for this code
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    },
    { merge: true },
  ) // Use merge to update if exists, create if not

  return code
}

export async function trackReferralSignup(referralCode: string): Promise<void> {
  if (!referralCode) {
    console.warn("Attempted to track referral signup with empty referralCode.")
    return
  }

  const referralRef = db.collection("referrals").doc(referralCode)
  const doc = await referralRef.get()

  if (doc.exists) {
    // Increment signup count for the specific referral code
    await referralRef.update({
      signups: (doc.data()?.signups || 0) + 1,
      updatedAt: new Date().toISOString(),
    })
  } else {
    // If the referral code doesn't exist, create it with 1 signup
    // This might happen if a user lands directly with a code not yet generated by a referrer
    await referralRef.set({
      code: referralCode,
      signups: 1,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    })
  }

  // Also increment a global counter for Founders Circle spots
  const statsRef = db.collection("referralStats").doc("current")
  await db.runTransaction(async (transaction) => {
    const statsDoc = await transaction.get(statsRef)
    if (statsDoc.exists) {
      const currentSignups = statsDoc.data()?.signups || 0
      transaction.update(statsRef, { signups: currentSignups + 1 })
    } else {
      transaction.set(statsRef, { signups: 1 })
    }
  })
}

export async function getReferralStats(): Promise<number> {
  const statsRef = db.collection("referralStats").doc("current")
  const doc = await statsRef.get()
  return doc.exists ? doc.data()?.signups || 0 : 0
}

export { BEEHIIV_API_KEY, BEEHIIV_PUBLICATION_ID }
